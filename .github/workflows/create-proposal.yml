name: Create Proposal

on:
  workflow_dispatch:
    inputs:
      program:
        description: Program
        required: true
        default: asset
        type: choice
        options:
          - asset
          - bridge
      cluster:
        description: Cluster environment
        required: true
        default: devnet
        type: choice
        options:
          - devnet
          - mainnet-beta
      bump:
        description: Level
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major

env:
  CACHE: true

jobs:
  build_programs:
    name: Programs
    uses: ./.github/workflows/build-programs.yml
    secrets: inherit

  test_programs:
    name: Programs
    needs: build_programs
    uses: ./.github/workflows/test-programs.yml
    secrets: inherit
    with:
      program_matrix: '["${{ inputs.program }}"]'

  test_js:
    name: JS client
    needs: build_programs
    uses: ./.github/workflows/test-js-client.yml
    secrets: inherit
    with:
      client_matrix: '["${{ inputs.program }}"]'

  test_rust:
    name: Rust client
    needs: build_programs
    uses: ./.github/workflows/test-rust-client.yml
    secrets: inherit
    with:
      client_matrix: '["${{ inputs.program }}"]'

  create_proposal:
    name: Program / Proposal
    runs-on: ubuntu-latest
    needs: [test_programs, test_js, test_rust]
    permissions:
      contents: write
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SERVICE_TOKEN }}

      - name: Load environment variables
        run: cat .github/.env >> $GITHUB_ENV

      - name: Install Rust
        uses: nifty-oss/actions/install-rust@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install Solana
        uses: nifty-oss/actions/install-solana@v1
        with:
          version: ${{ env.SOLANA_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Set RPC
        run: |
          if [ "${{ inputs.cluster }}" == "devnet" ]; then
            echo RPC=${{ secrets.DEVNET_RPC }} >> $GITHUB_ENV
            echo MINT_TYPE="council" >> $GITHUB_ENV
          elif [ "${{ inputs.cluster }}" == "mainnet-beta" ]; then
            echo RPC=${{ secrets.MAINNET_RPC }} >> $GITHUB_ENV
            echo MINT_TYPE="member" >> $GITHUB_ENV
          else
            echo "Invalid cluster"
            exit 1
          fi

      - name: Determine program version
        run: |
          IDL_NAME="${{ inputs.program }}_program"
          VERSION=`jq '.version' ./idls/${IDL_NAME}.json | sed 's/"//g'`
          MAJOR=`echo ${VERSION} | cut -d. -f1`
          MINOR=`echo ${VERSION} | cut -d. -f2`
          PATCH=`echo ${VERSION} | cut -d. -f3`

          if [ "${{ inputs.level }}" == "major" ]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
          elif [ "${{ inputs.level }}" == "minor" ]; then
              MINOR=$((MINOR + 1))
              PATCH=0
          else
              PATCH=$((PATCH + 1))
          fi

          PROGRAM_VERSION="${MAJOR}.${MINOR}.${PATCH}"

          cp ./idls/${IDL_NAME}.json ./idls/${IDL_NAME}-previous.json
          jq ".version = \"${PROGRAM_VERSION}\"" ./idls/${IDL_NAME}-previous.json > ./idls/${IDL_NAME}.json
          echo "" >> ./idls/${IDL_NAME}.json
          rm ./idls/${IDL_NAME}-previous.json

          echo PROGRAM_VERSION="${PROGRAM_VERSION}" >> $GITHUB_ENV

      - name: Download program builds
        uses: actions/download-artifact@v4
        with:
          name: program-builds

      - name: Create proposal
        working-directory: ./programs/.bin
        run: |
          echo "Deploying ${{ inputs.program }} to ${{ inputs.cluster }}"
          echo "Creating program buffer..."

          echo ${{ secrets.NIFTY_DEPLOYER_KEY }} > ./deployer-key.json 

          solana config set -k ./deployer-key.json > /dev/null 2>&1
          solana config set --url ${{ env.RPC }} > /dev/null 2>&1

          BUFFER=$(solana program write-buffer ./programs/.bin/${{ env.PROGRAM_NAME }}_program.so | awk '{print $2}')
          echo "Buffer: $BUFFER"
          solana program set-buffer-authority --new-buffer-authority ${{ env.NIFTY_DEPLOYER_KEY }} $BUFFER

          rm deployer-key.json

        #GIT_TAG="proposal(v${{ env.PROGRAM_VERSION }}@${{ inputs.cluster }})"
        #DELETE_TAG=`git tag | grep '${GIT_TAG}' | wc -l | awk '{print $1}'`
        #
        #if [ ${DELETE_TAG} -gt 1 ]; then
        #  git push --delete origin -d $GIT_TAG 2> /dev/null
        #  echo "Removed git tag: '$GIT_TAG'"
        #fi

      #- name: Tag the proposal commit
      #  run: |
      #    echo "Tagging the proposal for nifty-${{ inputs.program }} to ${{ inputs.cluster }}"

      #    GIT_TAG="proposal(nifty-${{ inputs.program }}@v${{ env.PROGRAM_VERSION }}-${{ inputs.cluster }})"

      #    git tag $GIT_TAG
      #    git push origin $GIT_TAG
