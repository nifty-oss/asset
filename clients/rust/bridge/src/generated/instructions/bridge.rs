//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct Bridge {
    /// Asset account of the mint (pda of `['nifty::bridge::asset', mint pubkey]`)
    pub asset: solana_program::pubkey::Pubkey,
    /// Bridge account for the asset (pda of `['nifty::bridge::vault', mint pubkey]`)
    pub vault: solana_program::pubkey::Pubkey,
    /// Token owner account
    pub owner: solana_program::pubkey::Pubkey,
    /// Token account
    pub token: solana_program::pubkey::Pubkey,
    /// Mint account of the token
    pub mint: solana_program::pubkey::Pubkey,
    /// Metadata account of the mint
    pub metadata: solana_program::pubkey::Pubkey,
    /// Master Edition of the mint
    pub master_edition: solana_program::pubkey::Pubkey,
    /// Owner token record account
    pub token_record: Option<solana_program::pubkey::Pubkey>,
    /// Vault token account
    pub vault_token: solana_program::pubkey::Pubkey,
    /// Vault token record account
    pub vault_token_record: Option<solana_program::pubkey::Pubkey>,
    /// The account paying for the storage fees
    pub payer: solana_program::pubkey::Pubkey,
    /// Nifty Asset program
    pub nifty_asset_program: solana_program::pubkey::Pubkey,
    /// Metaplex Token Metadata program
    pub token_metadata_program: solana_program::pubkey::Pubkey,
    /// System program
    pub system_program: solana_program::pubkey::Pubkey,
    /// Instructions sysvar account
    pub sysvar_instructions: solana_program::pubkey::Pubkey,
    /// SPL Token program
    pub spl_token_program: solana_program::pubkey::Pubkey,
    /// SPL ATA program
    pub spl_ata_program: solana_program::pubkey::Pubkey,
    /// Token Auth Rules program
    pub authorization_rules_program: Option<solana_program::pubkey::Pubkey>,
    /// Token Auth Rules account
    pub authorization_rules: Option<solana_program::pubkey::Pubkey>,
    /// Group asset account
    pub group_asset: Option<solana_program::pubkey::Pubkey>,
}

impl Bridge {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(20 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.asset, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.master_edition,
            false,
        ));
        if let Some(token_record) = self.token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                token_record,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BRIDGE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_token,
            false,
        ));
        if let Some(vault_token_record) = self.vault_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                vault_token_record,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BRIDGE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.nifty_asset_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_metadata_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sysvar_instructions,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.spl_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.spl_ata_program,
            false,
        ));
        if let Some(authorization_rules_program) = self.authorization_rules_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                authorization_rules_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BRIDGE_ID,
                false,
            ));
        }
        if let Some(authorization_rules) = self.authorization_rules {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                authorization_rules,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BRIDGE_ID,
                false,
            ));
        }
        if let Some(group_asset) = self.group_asset {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                group_asset,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BRIDGE_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let data = BridgeInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::BRIDGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct BridgeInstructionData {
    discriminator: u8,
}

impl BridgeInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 0 }
    }
}

impl Default for BridgeInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `Bridge`.
///
/// ### Accounts:
///
///   0. `[writable]` asset
///   1. `[writable]` vault
///   2. `[signer]` owner
///   3. `[writable]` token
///   4. `[]` mint
///   5. `[writable]` metadata
///   6. `[]` master_edition
///   7. `[writable, optional]` token_record
///   8. `[writable]` vault_token
///   9. `[writable, optional]` vault_token_record
///   10. `[writable, signer]` payer
///   11. `[optional]` nifty_asset_program (default to `AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73`)
///   12. `[optional]` token_metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
///   13. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   14. `[optional]` sysvar_instructions (default to `Sysvar1nstructions1111111111111111111111111`)
///   15. `[optional]` spl_token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   16. `[optional]` spl_ata_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   17. `[optional]` authorization_rules_program
///   18. `[optional]` authorization_rules
///   19. `[optional]` group_asset
#[derive(Clone, Debug, Default)]
pub struct BridgeBuilder {
    asset: Option<solana_program::pubkey::Pubkey>,
    vault: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    token: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    metadata: Option<solana_program::pubkey::Pubkey>,
    master_edition: Option<solana_program::pubkey::Pubkey>,
    token_record: Option<solana_program::pubkey::Pubkey>,
    vault_token: Option<solana_program::pubkey::Pubkey>,
    vault_token_record: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    nifty_asset_program: Option<solana_program::pubkey::Pubkey>,
    token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    sysvar_instructions: Option<solana_program::pubkey::Pubkey>,
    spl_token_program: Option<solana_program::pubkey::Pubkey>,
    spl_ata_program: Option<solana_program::pubkey::Pubkey>,
    authorization_rules_program: Option<solana_program::pubkey::Pubkey>,
    authorization_rules: Option<solana_program::pubkey::Pubkey>,
    group_asset: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl BridgeBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Asset account of the mint (pda of `['nifty::bridge::asset', mint pubkey]`)
    #[inline(always)]
    pub fn asset(&mut self, asset: solana_program::pubkey::Pubkey) -> &mut Self {
        self.asset = Some(asset);
        self
    }
    /// Bridge account for the asset (pda of `['nifty::bridge::vault', mint pubkey]`)
    #[inline(always)]
    pub fn vault(&mut self, vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault = Some(vault);
        self
    }
    /// Token owner account
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// Token account
    #[inline(always)]
    pub fn token(&mut self, token: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token = Some(token);
        self
    }
    /// Mint account of the token
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    /// Metadata account of the mint
    #[inline(always)]
    pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.metadata = Some(metadata);
        self
    }
    /// Master Edition of the mint
    #[inline(always)]
    pub fn master_edition(&mut self, master_edition: solana_program::pubkey::Pubkey) -> &mut Self {
        self.master_edition = Some(master_edition);
        self
    }
    /// `[optional account]`
    /// Owner token record account
    #[inline(always)]
    pub fn token_record(
        &mut self,
        token_record: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.token_record = token_record;
        self
    }
    /// Vault token account
    #[inline(always)]
    pub fn vault_token(&mut self, vault_token: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault_token = Some(vault_token);
        self
    }
    /// `[optional account]`
    /// Vault token record account
    #[inline(always)]
    pub fn vault_token_record(
        &mut self,
        vault_token_record: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.vault_token_record = vault_token_record;
        self
    }
    /// The account paying for the storage fees
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to 'AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73']`
    /// Nifty Asset program
    #[inline(always)]
    pub fn nifty_asset_program(
        &mut self,
        nifty_asset_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.nifty_asset_program = Some(nifty_asset_program);
        self
    }
    /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
    /// Metaplex Token Metadata program
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_metadata_program = Some(token_metadata_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
    /// Instructions sysvar account
    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sysvar_instructions = Some(sysvar_instructions);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL Token program
    #[inline(always)]
    pub fn spl_token_program(
        &mut self,
        spl_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.spl_token_program = Some(spl_token_program);
        self
    }
    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// SPL ATA program
    #[inline(always)]
    pub fn spl_ata_program(
        &mut self,
        spl_ata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.spl_ata_program = Some(spl_ata_program);
        self
    }
    /// `[optional account]`
    /// Token Auth Rules program
    #[inline(always)]
    pub fn authorization_rules_program(
        &mut self,
        authorization_rules_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.authorization_rules_program = authorization_rules_program;
        self
    }
    /// `[optional account]`
    /// Token Auth Rules account
    #[inline(always)]
    pub fn authorization_rules(
        &mut self,
        authorization_rules: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.authorization_rules = authorization_rules;
        self
    }
    /// `[optional account]`
    /// Group asset account
    #[inline(always)]
    pub fn group_asset(
        &mut self,
        group_asset: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.group_asset = group_asset;
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts =
            Bridge {
                asset: self.asset.expect("asset is not set"),
                vault: self.vault.expect("vault is not set"),
                owner: self.owner.expect("owner is not set"),
                token: self.token.expect("token is not set"),
                mint: self.mint.expect("mint is not set"),
                metadata: self.metadata.expect("metadata is not set"),
                master_edition: self.master_edition.expect("master_edition is not set"),
                token_record: self.token_record,
                vault_token: self.vault_token.expect("vault_token is not set"),
                vault_token_record: self.vault_token_record,
                payer: self.payer.expect("payer is not set"),
                nifty_asset_program: self.nifty_asset_program.unwrap_or(solana_program::pubkey!(
                    "AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73"
                )),
                token_metadata_program: self.token_metadata_program.unwrap_or(
                    solana_program::pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"),
                ),
                system_program: self
                    .system_program
                    .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                sysvar_instructions: self.sysvar_instructions.unwrap_or(solana_program::pubkey!(
                    "Sysvar1nstructions1111111111111111111111111"
                )),
                spl_token_program: self.spl_token_program.unwrap_or(solana_program::pubkey!(
                    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                )),
                spl_ata_program: self.spl_ata_program.unwrap_or(solana_program::pubkey!(
                    "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
                )),
                authorization_rules_program: self.authorization_rules_program,
                authorization_rules: self.authorization_rules,
                group_asset: self.group_asset,
            };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `bridge` CPI accounts.
pub struct BridgeCpiAccounts<'a, 'b> {
    /// Asset account of the mint (pda of `['nifty::bridge::asset', mint pubkey]`)
    pub asset: &'b solana_program::account_info::AccountInfo<'a>,
    /// Bridge account for the asset (pda of `['nifty::bridge::vault', mint pubkey]`)
    pub vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token owner account
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account
    pub token: &'b solana_program::account_info::AccountInfo<'a>,
    /// Mint account of the token
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Metadata account of the mint
    pub metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// Master Edition of the mint
    pub master_edition: &'b solana_program::account_info::AccountInfo<'a>,
    /// Owner token record account
    pub token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Vault token account
    pub vault_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// Vault token record account
    pub vault_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The account paying for the storage fees
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Nifty Asset program
    pub nifty_asset_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Metaplex Token Metadata program
    pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Instructions sysvar account
    pub sysvar_instructions: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program
    pub spl_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL ATA program
    pub spl_ata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token Auth Rules program
    pub authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Token Auth Rules account
    pub authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Group asset account
    pub group_asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `bridge` CPI instruction.
pub struct BridgeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Asset account of the mint (pda of `['nifty::bridge::asset', mint pubkey]`)
    pub asset: &'b solana_program::account_info::AccountInfo<'a>,
    /// Bridge account for the asset (pda of `['nifty::bridge::vault', mint pubkey]`)
    pub vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token owner account
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account
    pub token: &'b solana_program::account_info::AccountInfo<'a>,
    /// Mint account of the token
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Metadata account of the mint
    pub metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// Master Edition of the mint
    pub master_edition: &'b solana_program::account_info::AccountInfo<'a>,
    /// Owner token record account
    pub token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Vault token account
    pub vault_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// Vault token record account
    pub vault_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The account paying for the storage fees
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Nifty Asset program
    pub nifty_asset_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Metaplex Token Metadata program
    pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Instructions sysvar account
    pub sysvar_instructions: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program
    pub spl_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL ATA program
    pub spl_ata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token Auth Rules program
    pub authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Token Auth Rules account
    pub authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Group asset account
    pub group_asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

impl<'a, 'b> BridgeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: BridgeCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            asset: accounts.asset,
            vault: accounts.vault,
            owner: accounts.owner,
            token: accounts.token,
            mint: accounts.mint,
            metadata: accounts.metadata,
            master_edition: accounts.master_edition,
            token_record: accounts.token_record,
            vault_token: accounts.vault_token,
            vault_token_record: accounts.vault_token_record,
            payer: accounts.payer,
            nifty_asset_program: accounts.nifty_asset_program,
            token_metadata_program: accounts.token_metadata_program,
            system_program: accounts.system_program,
            sysvar_instructions: accounts.sysvar_instructions,
            spl_token_program: accounts.spl_token_program,
            spl_ata_program: accounts.spl_ata_program,
            authorization_rules_program: accounts.authorization_rules_program,
            authorization_rules: accounts.authorization_rules,
            group_asset: accounts.group_asset,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(20 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.asset.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.master_edition.key,
            false,
        ));
        if let Some(token_record) = self.token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *token_record.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BRIDGE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_token.key,
            false,
        ));
        if let Some(vault_token_record) = self.vault_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *vault_token_record.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BRIDGE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.nifty_asset_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_metadata_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sysvar_instructions.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.spl_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.spl_ata_program.key,
            false,
        ));
        if let Some(authorization_rules_program) = self.authorization_rules_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *authorization_rules_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BRIDGE_ID,
                false,
            ));
        }
        if let Some(authorization_rules) = self.authorization_rules {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *authorization_rules.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BRIDGE_ID,
                false,
            ));
        }
        if let Some(group_asset) = self.group_asset {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *group_asset.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BRIDGE_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = BridgeInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::BRIDGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(20 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.asset.clone());
        account_infos.push(self.vault.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.token.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.metadata.clone());
        account_infos.push(self.master_edition.clone());
        if let Some(token_record) = self.token_record {
            account_infos.push(token_record.clone());
        }
        account_infos.push(self.vault_token.clone());
        if let Some(vault_token_record) = self.vault_token_record {
            account_infos.push(vault_token_record.clone());
        }
        account_infos.push(self.payer.clone());
        account_infos.push(self.nifty_asset_program.clone());
        account_infos.push(self.token_metadata_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.sysvar_instructions.clone());
        account_infos.push(self.spl_token_program.clone());
        account_infos.push(self.spl_ata_program.clone());
        if let Some(authorization_rules_program) = self.authorization_rules_program {
            account_infos.push(authorization_rules_program.clone());
        }
        if let Some(authorization_rules) = self.authorization_rules {
            account_infos.push(authorization_rules.clone());
        }
        if let Some(group_asset) = self.group_asset {
            account_infos.push(group_asset.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Bridge` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` asset
///   1. `[writable]` vault
///   2. `[signer]` owner
///   3. `[writable]` token
///   4. `[]` mint
///   5. `[writable]` metadata
///   6. `[]` master_edition
///   7. `[writable, optional]` token_record
///   8. `[writable]` vault_token
///   9. `[writable, optional]` vault_token_record
///   10. `[writable, signer]` payer
///   11. `[]` nifty_asset_program
///   12. `[]` token_metadata_program
///   13. `[]` system_program
///   14. `[]` sysvar_instructions
///   15. `[]` spl_token_program
///   16. `[]` spl_ata_program
///   17. `[optional]` authorization_rules_program
///   18. `[optional]` authorization_rules
///   19. `[optional]` group_asset
#[derive(Clone, Debug)]
pub struct BridgeCpiBuilder<'a, 'b> {
    instruction: Box<BridgeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BridgeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(BridgeCpiBuilderInstruction {
            __program: program,
            asset: None,
            vault: None,
            owner: None,
            token: None,
            mint: None,
            metadata: None,
            master_edition: None,
            token_record: None,
            vault_token: None,
            vault_token_record: None,
            payer: None,
            nifty_asset_program: None,
            token_metadata_program: None,
            system_program: None,
            sysvar_instructions: None,
            spl_token_program: None,
            spl_ata_program: None,
            authorization_rules_program: None,
            authorization_rules: None,
            group_asset: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Asset account of the mint (pda of `['nifty::bridge::asset', mint pubkey]`)
    #[inline(always)]
    pub fn asset(&mut self, asset: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asset = Some(asset);
        self
    }
    /// Bridge account for the asset (pda of `['nifty::bridge::vault', mint pubkey]`)
    #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.vault = Some(vault);
        self
    }
    /// Token owner account
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// Token account
    #[inline(always)]
    pub fn token(&mut self, token: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.token = Some(token);
        self
    }
    /// Mint account of the token
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }
    /// Metadata account of the mint
    #[inline(always)]
    pub fn metadata(
        &mut self,
        metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata = Some(metadata);
        self
    }
    /// Master Edition of the mint
    #[inline(always)]
    pub fn master_edition(
        &mut self,
        master_edition: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.master_edition = Some(master_edition);
        self
    }
    /// `[optional account]`
    /// Owner token record account
    #[inline(always)]
    pub fn token_record(
        &mut self,
        token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.token_record = token_record;
        self
    }
    /// Vault token account
    #[inline(always)]
    pub fn vault_token(
        &mut self,
        vault_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_token = Some(vault_token);
        self
    }
    /// `[optional account]`
    /// Vault token record account
    #[inline(always)]
    pub fn vault_token_record(
        &mut self,
        vault_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.vault_token_record = vault_token_record;
        self
    }
    /// The account paying for the storage fees
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// Nifty Asset program
    #[inline(always)]
    pub fn nifty_asset_program(
        &mut self,
        nifty_asset_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.nifty_asset_program = Some(nifty_asset_program);
        self
    }
    /// Metaplex Token Metadata program
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_metadata_program = Some(token_metadata_program);
        self
    }
    /// System program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Instructions sysvar account
    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sysvar_instructions = Some(sysvar_instructions);
        self
    }
    /// SPL Token program
    #[inline(always)]
    pub fn spl_token_program(
        &mut self,
        spl_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.spl_token_program = Some(spl_token_program);
        self
    }
    /// SPL ATA program
    #[inline(always)]
    pub fn spl_ata_program(
        &mut self,
        spl_ata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.spl_ata_program = Some(spl_ata_program);
        self
    }
    /// `[optional account]`
    /// Token Auth Rules program
    #[inline(always)]
    pub fn authorization_rules_program(
        &mut self,
        authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.authorization_rules_program = authorization_rules_program;
        self
    }
    /// `[optional account]`
    /// Token Auth Rules account
    #[inline(always)]
    pub fn authorization_rules(
        &mut self,
        authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.authorization_rules = authorization_rules;
        self
    }
    /// `[optional account]`
    /// Group asset account
    #[inline(always)]
    pub fn group_asset(
        &mut self,
        group_asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.group_asset = group_asset;
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = BridgeCpi {
            __program: self.instruction.__program,

            asset: self.instruction.asset.expect("asset is not set"),

            vault: self.instruction.vault.expect("vault is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            token: self.instruction.token.expect("token is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            metadata: self.instruction.metadata.expect("metadata is not set"),

            master_edition: self
                .instruction
                .master_edition
                .expect("master_edition is not set"),

            token_record: self.instruction.token_record,

            vault_token: self
                .instruction
                .vault_token
                .expect("vault_token is not set"),

            vault_token_record: self.instruction.vault_token_record,

            payer: self.instruction.payer.expect("payer is not set"),

            nifty_asset_program: self
                .instruction
                .nifty_asset_program
                .expect("nifty_asset_program is not set"),

            token_metadata_program: self
                .instruction
                .token_metadata_program
                .expect("token_metadata_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            sysvar_instructions: self
                .instruction
                .sysvar_instructions
                .expect("sysvar_instructions is not set"),

            spl_token_program: self
                .instruction
                .spl_token_program
                .expect("spl_token_program is not set"),

            spl_ata_program: self
                .instruction
                .spl_ata_program
                .expect("spl_ata_program is not set"),

            authorization_rules_program: self.instruction.authorization_rules_program,

            authorization_rules: self.instruction.authorization_rules,

            group_asset: self.instruction.group_asset,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct BridgeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    master_edition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    nifty_asset_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sysvar_instructions: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    spl_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    spl_ata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    group_asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
