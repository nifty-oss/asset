//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum AssetError {
    /// 0 - Asset already initialized
    #[error("Asset already initialized")]
    AlreadyInitialized = 0x0,
    /// 1 - Invalid account length
    #[error("Invalid account length")]
    InvalidAccountLength = 0x1,
    /// 2 - Incomplete extension data
    #[error("Incomplete extension data")]
    IncompleteExtensionData = 0x2,
    /// 3 - Uninitialized account
    #[error("Uninitialized account")]
    Uninitialized = 0x3,
    /// 4 - Extension not found
    #[error("Extension not found")]
    ExtensionNotFound = 0x4,
    /// 5 - Invalid alignment
    #[error("Invalid alignment")]
    InvalidAlignment = 0x5,
    /// 6 - Invalid owner or burn delegate
    #[error("Invalid owner or burn delegate")]
    InvalidBurnAuthority = 0x6,
    /// 7 - Invalid owner or transfer delegate
    #[error("Invalid owner or transfer delegate")]
    InvalidTransferAuthority = 0x7,
    /// 8 - Delegate not found
    #[error("Delegate not found")]
    DelegateNotFound = 0x8,
    /// 9 - Delegate role not active
    #[error("Delegate role not active")]
    DelegateRoleNotActive = 0x9,
    /// 10 - Invalid delegate
    #[error("Invalid delegate")]
    InvalidDelegate = 0xA,
    /// 11 - Invalid asset owner
    #[error("Invalid asset owner")]
    InvalidAssetOwner = 0xB,
    /// 12 - Asset is locked
    #[error("Asset is locked")]
    LockedAsset = 0xC,
    /// 13 - Invalid authority
    #[error("Invalid authority")]
    InvalidAuthority = 0xD,
    /// 14 - Immutable asset
    #[error("Immutable asset")]
    ImmutableAsset = 0xE,
    /// 15 - Soulbound assets are non-transferable
    #[error("Soulbound assets are non-transferable")]
    CannotTransferSoulbound = 0xF,
    /// 16 - Extension data invalid
    #[error("Extension data invalid")]
    ExtensionDataInvalid = 0x10,
    /// 17 - Invalid group
    #[error("Invalid group")]
    InvalidGroup = 0x11,
    /// 18 - Assertion Failure
    #[error("Assertion Failure")]
    AssertionFailure = 0x12,
    /// 19 - Group is not empty
    #[error("Group is not empty")]
    GroupNotEmpty = 0x13,
    /// 20 - Asset is already in a group
    #[error("Asset is already in a group")]
    AlreadyInGroup = 0x14,
    /// 21 - Extension length invalid
    #[error("Extension length invalid")]
    ExtensionLengthInvalid = 0x15,
}

impl solana_program::program_error::PrintProgramError for AssetError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
