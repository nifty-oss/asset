/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidMint: Invalid mint account */
export class InvalidMintError extends ProgramError {
  override readonly name: string = 'InvalidMint';

  readonly code: number = 0x0; // 0

  constructor(program: Program, cause?: Error) {
    super('Invalid mint account', program, cause);
  }
}
codeToErrorMap.set(0x0, InvalidMintError);
nameToErrorMap.set('InvalidMint', InvalidMintError);

/** InvalidAuthority: Invalid authority account */
export class InvalidAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidAuthority';

  readonly code: number = 0x1; // 1

  constructor(program: Program, cause?: Error) {
    super('Invalid authority account', program, cause);
  }
}
codeToErrorMap.set(0x1, InvalidAuthorityError);
nameToErrorMap.set('InvalidAuthority', InvalidAuthorityError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getProxyErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getProxyErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
