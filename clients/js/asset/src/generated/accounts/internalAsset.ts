/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  bool,
  publicKey as publicKeySerializer,
  string,
} from '@metaplex-foundation/umi/serializers';
import {
  InternalAssetAccountData,
  NullablePublicKeyArgs,
  getInternalAssetAccountDataSerializer,
  getNullablePublicKeySerializer,
} from '../../hooked';
import {
  DelegateArgs,
  DiscriminatorArgs,
  StandardArgs,
  StateArgs,
  getDelegateSerializer,
  getDiscriminatorSerializer,
  getStandardSerializer,
  getStateSerializer,
} from '../types';

export type InternalAsset = Account<InternalAssetAccountData>;

export function deserializeInternalAsset(
  rawAccount: RpcAccount
): InternalAsset {
  return deserializeAccount(
    rawAccount,
    getInternalAssetAccountDataSerializer()
  );
}

export async function fetchInternalAsset(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<InternalAsset> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'InternalAsset');
  return deserializeInternalAsset(maybeAccount);
}

export async function safeFetchInternalAsset(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<InternalAsset | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeInternalAsset(maybeAccount) : null;
}

export async function fetchAllInternalAsset(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<InternalAsset[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'InternalAsset');
    return deserializeInternalAsset(maybeAccount);
  });
}

export async function safeFetchAllInternalAsset(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<InternalAsset[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeInternalAsset(maybeAccount as RpcAccount)
    );
}

export function getInternalAssetGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'asset',
    'AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: DiscriminatorArgs;
      state: StateArgs;
      standard: StandardArgs;
      mutable: boolean;
      owner: PublicKey;
      group: NullablePublicKeyArgs;
      authority: PublicKey;
      delegate: DelegateArgs;
      name: string;
    }>({
      discriminator: [0, getDiscriminatorSerializer()],
      state: [1, getStateSerializer()],
      standard: [2, getStandardSerializer()],
      mutable: [3, bool()],
      owner: [4, publicKeySerializer()],
      group: [36, getNullablePublicKeySerializer()],
      authority: [null, publicKeySerializer()],
      delegate: [null, getDelegateSerializer()],
      name: [null, string({ size: 35 })],
    })
    .deserializeUsing<InternalAsset>((account) =>
      deserializeInternalAsset(account)
    );
}
