/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  array,
  dataEnum,
  struct,
  unit,
} from '@metaplex-foundation/umi/serializers';
import { DelegateRole, DelegateRoleArgs, getDelegateRoleSerializer } from '.';

export type DelegateInput =
  | { __kind: 'All' }
  | { __kind: 'Some'; roles: Array<DelegateRole> };

export type DelegateInputArgs =
  | { __kind: 'All' }
  | { __kind: 'Some'; roles: Array<DelegateRoleArgs> };

export function getDelegateInputSerializer(): Serializer<
  DelegateInputArgs,
  DelegateInput
> {
  return dataEnum<DelegateInput>(
    [
      ['All', unit()],
      [
        'Some',
        struct<GetDataEnumKindContent<DelegateInput, 'Some'>>([
          ['roles', array(getDelegateRoleSerializer())],
        ]),
      ],
    ],
    { description: 'DelegateInput' }
  ) as Serializer<DelegateInputArgs, DelegateInput>;
}

// Data Enum Helpers.
export function delegateInput(
  kind: 'All'
): GetDataEnumKind<DelegateInputArgs, 'All'>;
export function delegateInput(
  kind: 'Some',
  data: GetDataEnumKindContent<DelegateInputArgs, 'Some'>
): GetDataEnumKind<DelegateInputArgs, 'Some'>;
export function delegateInput<K extends DelegateInputArgs['__kind']>(
  kind: K,
  data?: any
): Extract<DelegateInputArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isDelegateInput<K extends DelegateInput['__kind']>(
  kind: K,
  value: DelegateInput
): value is DelegateInput & { __kind: K } {
  return value.__kind === kind;
}
