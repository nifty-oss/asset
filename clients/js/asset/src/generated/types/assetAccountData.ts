/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  Delegate,
  DelegateArgs,
  Discriminator,
  Standard,
  StandardArgs,
  State,
  StateArgs,
  getDelegateSerializer,
  getDiscriminatorSerializer,
  getStandardSerializer,
  getStateSerializer,
} from '.';
import {
  NullablePublicKey,
  NullablePublicKeyArgs,
  getNullablePublicKeySerializer,
} from '../../hooked';

export type AssetAccountData = {
  discriminator: Discriminator;
  state: State;
  standard: Standard;
  mutable: boolean;
  owner: PublicKey;
  group: NullablePublicKey;
  authority: PublicKey;
  delegate: Delegate;
  name: string;
};

export type AssetAccountDataArgs = {
  state: StateArgs;
  standard: StandardArgs;
  mutable: boolean;
  owner: PublicKey;
  group: NullablePublicKeyArgs;
  authority: PublicKey;
  delegate: DelegateArgs;
  name: string;
};

export function getAssetAccountDataSerializer(): Serializer<
  AssetAccountDataArgs,
  AssetAccountData
> {
  return mapSerializer<AssetAccountDataArgs, any, AssetAccountData>(
    struct<AssetAccountData>(
      [
        ['discriminator', getDiscriminatorSerializer()],
        ['state', getStateSerializer()],
        ['standard', getStandardSerializer()],
        ['mutable', bool()],
        ['owner', publicKeySerializer()],
        ['group', getNullablePublicKeySerializer()],
        ['authority', publicKeySerializer()],
        ['delegate', getDelegateSerializer()],
        ['name', string({ size: 35 })],
      ],
      { description: 'AssetAccountData' }
    ),
    (value) => ({ ...value, discriminator: Discriminator.Asset })
  ) as Serializer<AssetAccountDataArgs, AssetAccountData>;
}
