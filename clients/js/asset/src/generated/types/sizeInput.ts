/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  u16,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type SizeInput = { __kind: 'Fit' } | { __kind: 'Extend'; value: number };

export type SizeInputArgs = SizeInput;

export function getSizeInputSerializer(): Serializer<SizeInputArgs, SizeInput> {
  return dataEnum<SizeInput>(
    [
      ['Fit', unit()],
      [
        'Extend',
        struct<GetDataEnumKindContent<SizeInput, 'Extend'>>([['value', u16()]]),
      ],
    ],
    { description: 'SizeInput' }
  ) as Serializer<SizeInputArgs, SizeInput>;
}

// Data Enum Helpers.
export function sizeInput(kind: 'Fit'): GetDataEnumKind<SizeInputArgs, 'Fit'>;
export function sizeInput(
  kind: 'Extend',
  data: GetDataEnumKindContent<SizeInputArgs, 'Extend'>
): GetDataEnumKind<SizeInputArgs, 'Extend'>;
export function sizeInput<K extends SizeInputArgs['__kind']>(
  kind: K,
  data?: any
): Extract<SizeInputArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isSizeInput<K extends SizeInput['__kind']>(
  kind: K,
  value: SizeInput
): value is SizeInput & { __kind: K } {
  return value.__kind === kind;
}
