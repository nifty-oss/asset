/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  u16,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type Strategy = { __kind: 'Trim' } | { __kind: 'Extend'; value: number };

export type StrategyArgs = Strategy;

export function getStrategySerializer(): Serializer<StrategyArgs, Strategy> {
  return dataEnum<Strategy>(
    [
      ['Trim', unit()],
      [
        'Extend',
        struct<GetDataEnumKindContent<Strategy, 'Extend'>>([['value', u16()]]),
      ],
    ],
    { description: 'Strategy' }
  ) as Serializer<StrategyArgs, Strategy>;
}

// Data Enum Helpers.
export function strategy(kind: 'Trim'): GetDataEnumKind<StrategyArgs, 'Trim'>;
export function strategy(
  kind: 'Extend',
  data: GetDataEnumKindContent<StrategyArgs, 'Extend'>
): GetDataEnumKind<StrategyArgs, 'Extend'>;
export function strategy<K extends StrategyArgs['__kind']>(
  kind: K,
  data?: any
): Extract<StrategyArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isStrategy<K extends Strategy['__kind']>(
  kind: K,
  value: Strategy
): value is Strategy & { __kind: K } {
  return value.__kind === kind;
}
